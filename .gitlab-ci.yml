include: ci_files/variables.yml

before_script:
  - source build-scripts/build.sh

stages:
  - phase-one
  - phase-two
  - phase-three
  - phase-four
  - phase-five
  - release

.except-ce: &except-ce
  except:
    variables:
      - $CE_PIPELINE
      - $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-rc\d+)?$/
      - $CI_COMMIT_REF_NAME =~ /^\d+-\d+-stable$/

.except-ee: &except-ee
  except:
    variables:
      - $EE_PIPELINE
      - $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-rc\d+)?-ee$/
      - $CI_COMMIT_REF_NAME =~ /^\d+-\d+-stable-ee$/

.job-base: &job-base
  image: "registry.gitlab.com/gitlab-org/gitlab-omnibus-builder/ruby_docker:0.0.32"
  services:
  - docker:dind
  dependencies: []
  retry: 1
  before_script:
    - mkdir -p artifacts
    - source build-scripts/build.sh
    - if [ -n "$GITALY_SERVER_VERSION" ]; then export GITALY_VERSION=$GITALY_SERVER_VERSION; fi
    - export {CONTAINER_VERSION,BASE_VERSION}=$(get_version gitlab-ruby)
    - export TARGET_VERSION=$(get_target_version)
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  artifacts:
    paths:
      - artifacts/

gitlab-ruby:
  <<: *job-base
  stage: phase-one
  script:
    - build_if_needed
    - push_if_master_or_tag

postgresql:
  <<: *job-base
  stage: phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$PG_VERSION" | sha1sum))
    - build_if_needed --build-arg "PG_VERSION=$PG_VERSION"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -  tag_and_push $PG_VERSION
    - fi
    - push_if_master_or_tag

cfssl-self-sign:
  <<: *job-base
  stage: phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$CFSSL_VERSION" | sha1sum))
    - build_if_needed --build-arg "CFSSL_VERSION=$CFSSL_VERSION" \
                      --build-arg "ALPINE_VERSION=$ALPINE_VERSION"
    - push_if_master_or_tag
    - push_if_master_or_tag "$CFSSL_VERSION"

kubectl:
  <<: *job-base
  stage: phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION${KUBECTL_VERSION}" | sha1sum))
    - build_if_needed --build-arg "KUBECTL_VERSION=${KUBECTL_VERSION}"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -  tag_and_push $KUBECTL_VERSION
    - fi
    - push_if_master_or_tag

alpine-certificates:
  <<: *job-base
  stage: phase-one
  script:
    # sets CA_PKG_VERSION to `20171114-r3` (from `P:ca-certificates\nV:VERSION\n`)
    - export CA_PKG_VERSION=$(curl -qs http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/main/x86_64/APKINDEX.tar.gz | tar xzf - -O APKINDEX | grep -A1 '^P:ca-certificates$' | tail -n1 | cut -d ':' -f2)
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$CA_PKG_VERSION" | sha1sum))
    - build_if_needed --build-arg "ALPINE_VERSION=${ALPINE_VERSION}" \
                      --build-arg "CA_PKG_VERSION=${CA_PKG_VERSION}"
    - push_if_master_or_tag
    - push_if_master_or_tag ${CA_PKG_VERSION}

gitlab-python:
  <<: *job-base
  stage: phase-one
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$PYTHON_VERSION" | sha1sum))
    - build_if_needed --build-arg "PYTHON_VERSION=${PYTHON_VERSION}"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -   tag_and_push $PYTHON_VERSION
    - fi
    - push_if_master_or_tag

gitlab-redis-ha:
  <<: *job-base
  stage: phase-two
  script:
    - export CONTAINER_VERSION=($(echo -n "$TARGET_VERSION$(date -u +%D)" | sha1sum))
    - build_if_needed
    - push_if_master_or_tag

gitlab-go:
  <<: *job-base
  stage: phase-two
  script:
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$TARGET_VERSION$GO_VERSION" | sha1sum))
    - ruby_version=$(get_version gitlab-ruby)
    - build_if_needed --build-arg "GO_VERSION=$GO_VERSION" \
                      --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-ruby" \
                      --build-arg "TAG=$ruby_version"
    - push_if_master_or_tag
  dependencies:
      - gitlab-ruby

gitlab-rails-ee:
  <<: *job-base
  stage: phase-four
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$go_version$TARGET_VERSION$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-go:$go_version"
    - pg_image="$CI_REGISTRY_IMAGE/postgresql:$PG_VERSION"
    - docker pull $pg_image > /dev/null || true
    - build_if_needed --build-arg "GITLAB_EDITION=gitlab-ee" \
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}" \
                      --build-arg "CACHE_BUSTER=$GITLAB_VERSION$(date -uI)" \
                      --build-arg "TAG=$go_version" \
                      --build-arg "PG_IMAGE=$pg_image" \
                      --build-arg "ASSETS_IMAGE=${ASSETS_IMAGE_REGISTRY_PREFIX}/gitlab-ee/${ASSETS_IMAGE_PREFIX}-ee:${GITLAB_ASSETS_TAG}"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  <<: *except-ce

gitlab-rails-ce:
  <<: *job-base
  stage: phase-four
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$go_version$TARGET_VERSION$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-go:$go_version"
    - pg_image="$CI_REGISTRY_IMAGE/postgresql:$PG_VERSION"
    - docker pull $pg_image > /dev/null || true
    - build_if_needed --build-arg "GITLAB_EDITION=gitlab-ce" \
                      --build-arg "GITLAB_VERSION=${GITLAB_VERSION}" \
                      --build-arg "CACHE_BUSTER=$GITLAB_VERSION$(date -uI)" \
                      --build-arg "TAG=$go_version" \
                      --build-arg "PG_IMAGE=$pg_image" \
                      --build-arg "ASSETS_IMAGE=${ASSETS_IMAGE_REGISTRY_PREFIX}/gitlab-ce/${ASSETS_IMAGE_PREFIX}-ce:${GITLAB_ASSETS_TAG}"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  <<: *except-ee

gitlab-task-runner-ee:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee" \
                      --build-arg "TAG=$rails_container" \
                      --build-arg "S3CMD_VERSION=$S3CMD_VERSION"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-task-runner-ce:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce" \
                      --build-arg "TAG=$rails_container" \
                      --build-arg "S3CMD_VERSION=$S3CMD_VERSION"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-unicorn-ee:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee" \
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-unicorn-ce:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce" \
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-sidekiq-ee:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ee:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ee" \
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ee
  <<: *except-ce

gitlab-sidekiq-ce:
  <<: *job-base
  stage: phase-five
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - rails_version=$(get_version gitlab-rails)
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-rails-ce:$rails_container"
    - build_if_needed --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-rails-ce" \
                      --build-arg "TAG=$rails_container"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  dependencies:
    - gitlab-rails-ce
  <<: *except-ee

gitlab-mailroom:
  <<: *job-base
  stage: phase-two
  script:
    - ruby_version=$(get_version gitlab-ruby)
    - export CONTAINER_VERSION=($(echo -n "$ruby_version$MAILROOM_VERSION" | sha1sum))
    - build_if_needed --build-arg "MAILROOM_VERSION=$MAILROOM_VERSION" \
                      --build-arg "FROM_IMAGE=$CI_REGISTRY_IMAGE/gitlab-ruby" \
                      --build-arg "TAG=$ruby_version"
    - push_if_master_or_tag
  dependencies:
      - gitlab-ruby

gitlab-shell:
  <<: *job-base
  stage: phase-three
  script:
    - go_dir_version=$(get_version gitlab-go)
    - gitlab_shell_dir_version=$(get_version gitlab-shell)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$go_version$TARGET_VERSION$GITLAB_SHELL_VERSION$(date -u +%D)$gitlab_shell_dir_version" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-go:$go_version"
    - build_if_needed --build-arg "TAG=$go_version"\
                      --build-arg "GITLAB_SHELL_VERSION=${GITLAB_SHELL_VERSION}"\
                      --build-arg "CACHE_BUSTER=$GITLAB_SHELL_VERSION$(date -uI)"
    - push_if_master_or_tag $GITLAB_SHELL_VERSION
  dependencies:
    - gitlab-go

git-base:
  <<: *job-base
  stage: phase-three
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - build_if_needed --build-arg "TAG=$go_version" --build-arg "GIT_VERSION=$GIT_VERSION"
    - if [ -n "$BUILDING_IMAGE" ]; then
    -  tag_and_push $GIT_VERSION
    - fi
    - push_if_master_or_tag

gitaly:
  <<: *job-base
  stage: phase-four
  script:
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - shell_version=$(get_version gitlab-shell)
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - export shell_container=($(echo -n "$BASE_VERSION$go_version$shell_version$GITLAB_SHELL_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$shell_container$GITALY_VERSION$git_version$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/gitlab-shell:$shell_container"
    - build_if_needed --build-arg "GITALY_VERSION=${GITALY_VERSION}" \
                      --build-arg "TAG=$GIT_VERSION" \
                      --build-arg "SHELL_CONTAINER=$shell_container" \
                      --build-arg "CACHE_BUSTER=$GITALY_VERSION$(date -uI)"
    - push_if_master_or_tag $GITALY_VERSION
  dependencies:
    - gitlab-shell

gitlab-workhorse-ee:
  <<: *job-base
  stage: phase-five
  script:
    - rails_version=$(get_version gitlab-rails)
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_WORKHORSE_VERSION$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_version"
    - build_if_needed --build-arg "TAG=$git_version" \
                      --build-arg "WORKHORSE_VERSION=$GITLAB_WORKHORSE_VERSION" \
                      --build-arg "RAILS_VERSION=${rails_container}" \
                      --build-arg "RUBY_VERSION=$ruby_version" \
                      --build-arg "GITLAB_EDITION=gitlab-rails-ee"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  <<: *except-ce

gitlab-workhorse-ce:
  <<: *job-base
  stage: phase-five
  script:
    - rails_version=$(get_version gitlab-rails)
    - ruby_version=$(get_version gitlab-ruby)
    - go_dir_version=$(get_version gitlab-go)
    - go_version=($(echo -n "$BASE_VERSION$go_dir_version$GO_VERSION" | sha1sum))
    - git_version=($(echo -n "$BASE_VERSION$go_version$GIT_VERSION" | sha1sum))
    - rails_container=($(echo -n "$go_version$rails_version$GITLAB_VERSION$(date -u +%D)" | sha1sum))
    - export CONTAINER_VERSION=($(echo -n "$GITLAB_WORKHORSE_VERSION$rails_container$TARGET_VERSION" | sha1sum))
    - export BASE_IMAGE="$CI_REGISTRY_IMAGE/git-base:$git_version"
    - build_if_needed --build-arg "TAG=$git_version" \
                      --build-arg "WORKHORSE_VERSION=$GITLAB_WORKHORSE_VERSION" \
                      --build-arg "RAILS_VERSION=${rails_container}" \
                      --build-arg "RUBY_VERSION=$ruby_version" \
                      --build-arg "GITLAB_EDITION=gitlab-rails-ce"
    - push_if_master_or_tag $GITLAB_REF_SLUG
  <<: *except-ee

component-details:
  image: "alpine:latest"
  stage: release
  before_script: []
  script:
    - cat artifacts/* > image_versions.txt
    - rm artifacts/*
    - mv image_versions.txt artifacts
  artifacts:
    paths:
      - artifacts/
  only:
    - tags@gitlab/charts/components/images

release-chart:
  stage: release
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:ruby-2.4-golang-1.10-git-2.17
  script:
    - git clone https://gitlab.com/gitlab-org/release-tools.git --depth 10 release-tools
    - cd release-tools
    - source scripts/setup_ssh.sh
    - echo "$HELM_RELEASE_BOT_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - git config --global user.email "dj+helm-rel-bot@gitlab.com"
    - git config --global user.name "GitLab Helm Chart Release Bot"
    - bundle install --jobs=$(nproc) --retry=3
    - bundle exec rake helm:tag_chart[,$(trim_tag $GITLAB_VERSION)]
  only:
    refs:
      - pipelines@gitlab-org/build/CNG
      - master@gitlab-org/build/CNG
    variables:
      - $GITLAB_VERSION =~ /^v\d+\.\d+\.\d+(-rc\d+)?-ee$/
  except:
    variables:
      - $CE_PIPELINE
      - $CI_COMMIT_TAG
