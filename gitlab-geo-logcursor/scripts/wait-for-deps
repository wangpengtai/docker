#!/bin/bash

WAIT_FOR_TIMEOUT="${WAIT_FOR_TIMEOUT:-5}"

cd /srv/gitlab

# fetch the schema desired version directly from the source code
SCHEMA_VERSION=$(grep '(version: ' /srv/gitlab/ee/geo/db/schema.rb | sed -e 's/.* \([[:digit:]]\+\)) do/\1/')

# Compare desired schema version to active schema version in the database
# - set BYPASS_SCHEMA_VERSION to skip version check, and only test DB online
function checkSchemaVersion() {
    # Ask for the current DB schema version, via Rake
    DB_SCHEMA_VERSION=$(/srv/gitlab/bin/bundle exec rake geo:db:version)

    # If rake failed, we're not connected to the DB, and DB_SCHEMA_VERSION is empty.
    if [ $? -ne 0 ]; then
      return 1
    fi

    # Output the current schema version
    echo "Geo Database Schema"
    echo $DB_SCHEMA_VERSION
    echo "Geo Codebase version: $SCHEMA_VERSION"
    # Some uses (migrations) only care if the DB is up
    if [ -n "${BYPASS_SCHEMA_VERSION}" ]; then
      return 0
    fi

    # DB_SCHEMA_VERSION ~ 'Current version: ##########', strip to just number.
    DB_SCHEMA_VERSION=${DB_SCHEMA_VERSION##Current version: }

    # Compare local to db, pass if local less than or equal to db
    [ $SCHEMA_VERSION -le $DB_SCHEMA_VERSION ];
    return $?
}

for i in $(seq 1 $WAIT_FOR_TIMEOUT); do
  echo "Checking database connection and schema version"
  if checkSchemaVersion ; then
    if [ "$@" ]; then
      exec "$@"
    else
      exit 0
    fi
  fi
  sleep 1
done
exit 1
