#!/bin/bash

set -e

echo "Checking database migrations are up-to-date"

UPGRADE_STATUS_DIR="${UPGRADE_STATUS_DIR:-/tmp/gitlab-upgrade}"
GITLAB_REVISION=$(cat /srv/gitlab/REVISION)
CONNECTION_DIGEST=$(md5sum /srv/gitlab/config/database.yml | awk '{ print $1 }' )
MIGRATE_STATUS_FILE="${UPGRADE_STATUS_DIR}/db-migrate-${CONNECTION_DIGEST}-${GITLAB_REVISION}"
ROOT_PASSWORD_FILE="${ROOT_PASSWORD_FILE:-/srv/gitlab/config/initial_root_password}"
LICENSE_FILE="${LICENSE_FILE:-/srv/gitlab/config/GITLAB_EE_LICENSE}"

# Exit if the database has already been updated
if [ -f "${MIGRATE_STATUS_FILE}" ] && ( grep -qFx 0 "${MIGRATE_STATUS_FILE}" ); then
  echo "Database migrations have already been run"
  exit 0
fi

if [ -f "${ROOT_PASSWORD_FILE}" ]; then
  INITIAL_PASSWORD=$(cat "${ROOT_PASSWORD_FILE}")
fi

# Seed or migrate the database
echo "Checking for new migrations"
mkdir -p "${UPGRADE_STATUS_DIR}"
umask 077
cd /srv/gitlab

GITLAB_ROOT_PASSWORD=${INITIAL_PASSWORD} /srv/gitlab/bin/rake gitlab:db:configure && STATUS=$? || STATUS=$?

# Disable authorized keys write
# Workaround for disabling the authorized_keys write to the database.
# A proper fix is being tracked in: https://gitlab.com/charts/helm.gitlab.io/issues/89
if [ "$STATUS" = "0" ]; then
  echo "Disable authorized keys write in the database"
  /scripts/disable-auth-keys-write && STATUS=$? || STATUS=$?
fi

# Enable feature flags for object storage
# - ci_enable_live_trace: archive traces in object storage as artifacts, live data in Redis
# - import_export_object_storage: use object storage for project import / export tarballs
if [ "$STATUS" = "0" ]; then
  echo "Enabling 'ci_enable_live_trace', 'import_export_object_storage' feature flags"
  /srv/gitlab/bin/rails runner -e production \
    "Feature.enable('ci_enable_live_trace'); Feature.enable('import_export_object_storage');" && STATUS=$? || STATUS=$?
fi

# Upload a license if the file is found
if [ -f "${LICENSE_FILE}" ]; then
  echo "Found license file. Attempting to apply the license."
  /srv/gitlab/bin/rails runner -e production \
    "content = File.read('${LICENSE_FILE}').strip; License.new(data: content).save if License.where(data: content).empty?" && STATUS=$? || STATUS=$?
fi

# Update the status
echo "Storing Migration Status"
echo $STATUS > "${MIGRATE_STATUS_FILE}"
exit $STATUS
